
compilationunit:
    First(topLevelUnitList)
->  CLASS, FUNC, LABEL, GLOBAL
topLevelUnitList:
    First(topLevelUnit)
->  CLASS, FUNC, LABEL, GLOBAL
topLevelUnit:
    First(program)
->  CLASS, FUNC, LABEL, GLOBAL
program:
    First(classdec, func, label, global)
->  CLASS, FUNC, LABEL, GLOBAL
label:
->  LABEL
global:
->  GLOBAL
globalTail:
    First(constant, constlist)
->  int, hex, bin, oct, double, string, char, boolean, ref, {, .
classdec:
->  CLASS
classpoly:
->  EXTENDS
classbody:
->  {
classinside:
    First(method, memeber, classconstr)
->  METH, MEMBER, CONSTR
classinsidelist:
    First(classvisibility), epsilon
->  PUBLIC, PROTECTED, PRIVATE, epsilon
classvisibility:
->  PUBLIC, PROTECTED, PRIVATE
method:
->  METH
member:
->  MEMBER
classconstr:
->  CONSTR
typemodifier:
->  STATIC, FINAL, epsilon
func:
->  FUNC
fparam:
->  (
arglist:
    First(typedesc, typedesctail), epsilon
->  int, double, char, string, boolean, ID, ,, epsilon
typedesctail:
->  ,, epsilon
typedesc:
    First(type)
->  int, double, char, string, boolean, ID
type:
->  int, double, char, string, boolean, ID
rtype:
    First(type), VOID
->  int, double, char, string, boolean, ID, VOID
emptyarraytail:
    First(emptyarray), epsilon
-> ., epsilon
emptyarray:
->  .
farraytail:
    First(farray), epsilon
-> [, ., epsilon
farray:
-> [, .
smtlist:
    First(smt), epsilon
->  ID, THIS, IF, WHILE, DO, FOR, SWITCH, FC, MC, SUPER, VAR, CONTINUE, BREAK, HOME, RETURN, GOTO, epsilon
smt:
    First(assignsmt, if, while, do, for, switch, f, meth, super, vardec, jump)
->  ID, THIS, IF, WHILE, DO, FOR, SWITCH, FC, MC, SUPER, VAR, CONTINUE, BREAK, HOME, RETURN, GOTO
ifsmt:
->  IF
elsepart:
->  ELSE
whilesmt:
->  WHILE
dowhilesmt:
->  DO
forsmt:
->  FOR
forstart:
    First(vardec, assignment), epsilon
->  VAR, ID, THIS, epsilon
formiddle:
    First(expr), epsilon
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (, epsilon
forend:
    First(assignment), epsilon
->  ID, THIS, epsilon
switchsmt:
-> SWITCH
caseinside:
-> CASE, DEFAULT
caseinsidelist:
    First(caseinside), epsilon
-> CASE, DEFAULT, epsilon
jumpstmt:
-> CONTINUE, BREAK, HOME, RETURN, GOTO
check:
-> (
smtblock:
-> {
assignsmt:
    First(variable)
-> ID, THIS
assignsmtTail:
    First(assignop, postop)
->  =, +=, -=, *=, /=, %=, **=, ^=, ++, --
vardec:
->  VAR
vardecComma:
    First(typemodifier)
->  STATIC, FINAL, epsilon
vardecCommaTail:
    First(vardecComma)
->  STATIC, FINAL, epsilon
vardecCommaTailRest:
->  ,, espilon
vardecTail:
->  =, epsilon
vardecTailP:
    First(expr, list)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (, {, .
variable:
    First(variableTail), THIS
->  ID, THIS
variableTail:
->  ID
idnest:
->  .
idnestTail:
    First(idnest), epsilon
->  ., epsilon
index:
->  [, epsilon
supercall:
->  SUPER
fargs:
    First(expr), epsilon
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (, epsilon
fargstail:
->  ,, epsilon
fcall:
->  FC
methcall:
->  MC
methcallTail:
    First(idnest), :
->  ., :
methcallend:
    First(methcallTail), epsilon
->  ., :, epsilon
fcallheader:
->  (
newobj:
->  NEW
fcallTail:
    First(index)
->  [, epsilon
expr:
    First(andExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
exprP:
->  OR, ||
andexpr:
    First(eqExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
andexprP:
->  AND, &&
eqexpr:
    First(relExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
eqexprP:
->  !=, ==
relexpr:
    First(addExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
relexprP:
->  <, >, <=, >=
addexpr:
    First(multExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
addexprP:
->  +,-
multexpr:
    First(expoExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
multexprP:
->  *, /, %
expoexpr:
    First(unaryExpr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
expoexprRest:
->  **, ^, epsilon
unaryexpr:
    !, not, -, First(cast)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
cast:
    CAST, First(primary)
->  CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
primary:
    First(variable, f, meth, new, constant), (
->  ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
constant:
->  int, hex, bin, oct, double, string, char, boolean, ref
list:
->  {, .
listTail:
->  ,, epsilon
exprMany:
    First(expr)
->  !, not, -, CAST, ID, THIS, FC, MC, NEW, int, hex, bin, oct, double, string, char, boolean, ref, (
exprManyTail:
->  ,, epsilon
constlist:
->  {, .
constlistTail:
->  ,, epsilon
constexprMany:
    First(constant)
->  int, hex, bin, oct, double, string, char, boolean, ref
constexprManyTail:
->  ,, epsilon
	
